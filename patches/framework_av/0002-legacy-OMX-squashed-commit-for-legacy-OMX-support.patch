From 15a9f664d46d11d785fe5fcd5b41700bac241eba Mon Sep 17 00:00:00 2001
From: Alexey Shavykin <ganster0x29@gmail.com>
Date: Sun, 28 Oct 2012 22:46:34 +0200
Subject: [PATCH 2/8] legacy OMX: squashed commit for legacy OMX support

Enable by setting TARGET_QCOM_LEGACY_OMX := true in BoardConfig.mk.

This is a combination of 7 commits.

commit ff5604878d2bf74555adcf938ffbf98d04bea305
Author: Alexey Shavykin <ganster0x29@gmail.com>
Date:   Sun Oct 28 22:46:34 2012 +0200

    Added support legacy Qualcomm OpenMAX IL libs for MSM7x27

    Change-Id: I63e68e63fce955fef52813360032f5e8e90a4b92

commit 27cf702ac81f27cae206ef182420c1cbcdadb709
Author: Ganster41 <ganster0x29@gmail.com>
Date:   Mon Nov 19 15:35:36 2012 +0200

    Correct gralloc usage flags for renderer

commit 3feab8906fcb4464d5f46bc13dcae9da36e41040
Author: Conn O'Griofa <connogriofa@gmail.com>
Date:   Fri Jan 4 00:31:13 2013 -0200

    Fix legacy OMX encoders

    Ensure that a valid frame_rate is passed to the encoder, otherwise
    encoding will fail.

    Change-Id: Iaaa298496755ff405e393120973d1ed782f5d8f4

commit f03627bce1de975ad9b88206874dda851b7d2bf4
Author: Grigori Goronzy <greg@blackbox>
Date:   Sat Jan 19 18:26:25 2013 +0100

    Fix alignment and copy size for legacy QCOM OMX

    Change-Id: I6d13c67601da0f0c35d3dd455401f982406cefe3

commit 3e6134027e9faa6b24b1cb1d205e4de0e76f9ed2
Author: Ganster41 <ganster0x29@gmail.com>
Date:   Sat Jan 5 19:33:44 2013 +0200

    Fixed Gingerbread mmparser using

    Change-Id: Ib931fa6ed4522b5851d42297f929183cf76043fd

commit 25edf9884ebbd3c608edc88d8bd8a7196d58b190
Author: Ganster41 <ganster0x29@gmail.com>
Date:   Mon Jan 7 19:56:32 2013 +0200

    Try use ExtendedExtractor only if no suitable default extractors available f

    Change-Id: I57a9cc39caee7e3fa2b709ab09cca5629bf81f44

commit 9e983100a684493d6c2df7952af4fa04f252c19b
Author: Konsta <konsta09@gmail.com>
Date:   Sun Oct 6 20:30:50 2013 +0300

    legacy OMX: use local flags

    Allows use of legacy mmparser without enabling all QCOM A/V
    enhancements that are not supported with legacy OMX blobs.

    Change-Id: Ieccf29ed8036864634ee167c1e21908377516494

Change-Id: Ieccf29ed8036864634ee167c1e21908377516494
---
 include/media/stagefright/DataSource.h             |  8 +++
 media/libstagefright/Android.mk                    |  5 ++
 media/libstagefright/AwesomePlayer.cpp             |  4 ++
 media/libstagefright/DataSource.cpp                | 22 ++++++++
 media/libstagefright/ExtendedCodec.cpp             |  2 +-
 media/libstagefright/ExtendedExtractor.cpp         | 41 +++++++++++++-
 media/libstagefright/ExtendedUtils.cpp             |  2 +-
 media/libstagefright/OMXCodec.cpp                  | 28 ++++++++-
 media/libstagefright/colorconversion/Android.mk    |  9 +++
 .../colorconversion/SoftwareRenderer.cpp           | 66 +++++++++++++++++++++-
 media/libstagefright/include/ExtendedExtractor.h   |  8 +++
 media/libstagefright/include/SoftwareRenderer.h    |  3 +
 12 files changed, 191 insertions(+), 7 deletions(-)

diff --git a/include/media/stagefright/DataSource.h b/include/media/stagefright/DataSource.h
index 157b1aa49..d06196d6f 100644
--- a/include/media/stagefright/DataSource.h
+++ b/include/media/stagefright/DataSource.h
@@ -80,6 +80,9 @@ public:
             const sp<DataSource> &source, String8 *mimeType,
             float *confidence, sp<AMessage> *meta);
 
+#ifdef QCOM_LEGACY_MMPARSER
+    static void RegisterSniffer_l(SnifferFunc func, bool isExtendedExtractor = false);
+#endif
     static void RegisterDefaultSniffers();
 
     // for DRM
@@ -100,9 +103,14 @@ protected:
 private:
     static Mutex gSnifferMutex;
     static List<SnifferFunc> gSniffers;
+#ifdef QCOM_LEGACY_MMPARSER
+    static List<SnifferFunc>::iterator extendedSnifferPosition;
+#endif
     static bool gSniffersRegistered;
 
+#ifndef QCOM_LEGACY_MMPARSER
     static void RegisterSniffer_l(SnifferFunc func);
+#endif
 
     DataSource(const DataSource &);
     DataSource &operator=(const DataSource &);
diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
index d1e52ddbb..8e1f1b3e9 100644
--- a/media/libstagefright/Android.mk
+++ b/media/libstagefright/Android.mk
@@ -136,6 +136,11 @@ ifeq ($(TARGET_ENABLE_QC_AV_ENHANCEMENTS),true)
        LOCAL_SRC_FILES  += ExtendedWriter.cpp
 endif #TARGET_ENABLE_AV_ENHANCEMENTS
 
+ifeq ($(TARGET_QCOM_LEGACY_OMX),true)
+    LOCAL_CFLAGS += -DQCOM_LEGACY_OMX -DQCOM_LEGACY_MMPARSER
+    LOCAL_SRC_FILES += ExtendedMediaDefs.cpp
+endif
+
 LOCAL_SRC_FILES += \
         chromium_http_stub.cpp
 LOCAL_CPPFLAGS += -DCHROMIUM_AVAILABLE=1
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index dbc4b9622..574ed3265 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -64,7 +64,11 @@
 
 #include <cutils/properties.h>
 
+#ifdef QCOM_LEGACY_OMX
+#define USE_SURFACE_ALLOC 0
+#else
 #define USE_SURFACE_ALLOC 1
+#endif
 #define FRAME_DROP_FREQ 0
 #ifdef QCOM_HARDWARE
 #define LPA_MIN_DURATION_USEC_ALLOWED 30000000
diff --git a/media/libstagefright/DataSource.cpp b/media/libstagefright/DataSource.cpp
index 5f3561d93..7e7d39190 100755
--- a/media/libstagefright/DataSource.cpp
+++ b/media/libstagefright/DataSource.cpp
@@ -110,6 +110,9 @@ status_t DataSource::getSize(off64_t *size) {
 
 Mutex DataSource::gSnifferMutex;
 List<DataSource::SnifferFunc> DataSource::gSniffers;
+#ifdef QCOM_LEGACY_MMPARSER
+List<DataSource::SnifferFunc>::iterator DataSource::extendedSnifferPosition;
+#endif
 bool DataSource::gSniffersRegistered = false;
 
 bool DataSource::sniff(
@@ -127,6 +130,11 @@ bool DataSource::sniff(
 
     for (List<SnifferFunc>::iterator it = gSniffers.begin();
          it != gSniffers.end(); ++it) {
+#ifdef QCOM_LEGACY_MMPARSER
+        // Don't try to use ExtendedExtractor if already found a suitable from the defaults
+        if(it == extendedSnifferPosition && *confidence > 0.0)
+            return true;
+#endif
         String8 newMimeType;
         float newConfidence;
         sp<AMessage> newMeta;
@@ -143,7 +151,11 @@ bool DataSource::sniff(
 }
 
 // static
+#ifdef QCOM_LEGACY_MMPARSER
+void DataSource::RegisterSniffer_l(SnifferFunc func, bool isExtendedExtractor) {
+#else
 void DataSource::RegisterSniffer_l(SnifferFunc func) {
+#endif
     for (List<SnifferFunc>::iterator it = gSniffers.begin();
          it != gSniffers.end(); ++it) {
         if (*it == func) {
@@ -152,6 +164,12 @@ void DataSource::RegisterSniffer_l(SnifferFunc func) {
     }
 
     gSniffers.push_back(func);
+#ifdef QCOM_LEGACY_MMPARSER
+    if(isExtendedExtractor) {
+        extendedSnifferPosition = gSniffers.end();
+        extendedSnifferPosition--;
+    }
+#endif
 }
 
 // static
@@ -171,9 +189,13 @@ void DataSource::RegisterDefaultSniffers() {
     RegisterSniffer_l(SniffMP3);
     RegisterSniffer_l(SniffAAC);
     RegisterSniffer_l(SniffMPEG2PS);
+#ifdef QCOM_LEGACY_MMPARSER
+    ExtendedExtractor::RegisterSniffers();
+#else
     RegisterSniffer_l(SniffWVM);
 #ifdef QCOM_HARDWARE
     RegisterSniffer_l(ExtendedExtractor::Sniff);
+#endif
 #endif
 
     char value[PROPERTY_VALUE_MAX];
diff --git a/media/libstagefright/ExtendedCodec.cpp b/media/libstagefright/ExtendedCodec.cpp
index ca2b2504b..1b1d7a070 100644
--- a/media/libstagefright/ExtendedCodec.cpp
+++ b/media/libstagefright/ExtendedCodec.cpp
@@ -43,7 +43,7 @@
 #include <media/stagefright/ExtendedCodec.h>
 #include <media/stagefright/OMXCodec.h>
 
-#ifdef ENABLE_AV_ENHANCEMENTS
+#if defined(ENABLE_AV_ENHANCEMENTS) || defined(QCOM_LEGACY_MMPARSER)
 
 #include <QCMetaData.h>
 #include <QCMediaDefs.h>
diff --git a/media/libstagefright/ExtendedExtractor.cpp b/media/libstagefright/ExtendedExtractor.cpp
index 952f5423d..4c9a45f22 100644
--- a/media/libstagefright/ExtendedExtractor.cpp
+++ b/media/libstagefright/ExtendedExtractor.cpp
@@ -32,12 +32,17 @@
 #include <dlfcn.h>  // for dlopen/dlclose
 #include "include/ExtendedExtractor.h"
 
-#ifdef ENABLE_AV_ENHANCEMENTS
+#if defined(ENABLE_AV_ENHANCEMENTS) || defined(QCOM_LEGACY_MMPARSER)
 
 namespace android {
 
+#ifdef QCOM_LEGACY_MMPARSER
+static const char* EXTENDED_EXTRACTOR_LIB = "libmmparser.so";
+static const char* EXTENDED_EXTRACTOR_CREATE = "createExtractor";
+#else
 static const char* EXTENDED_EXTRACTOR_LIB = "libExtendedExtractor.so";
 static const char* EXTENDED_EXTRACTOR_CREATE = "CreateExtractor";
+#endif
 static const char* EXTENDED_EXTRACTOR_SNIFF = "SniffExtendedExtractor";
 
 typedef MediaExtractor* (*ExtendedExtractorCreate)
@@ -95,6 +100,40 @@ MediaExtractor* ExtendedExtractor::Create (
     return extractor;
 }
 
+#ifdef QCOM_LEGACY_MMPARSER
+void ExtendedExtractor::RegisterSniffers() {
+    void *extendedExtractorLib = loadExtendedExtractorLib();
+    if (extendedExtractorLib == NULL) {
+        return;
+    }
+
+    SnifferArrayFunc snifferArrayFunc = (SnifferArrayFunc) dlsym(
+            extendedExtractorLib, MEDIA_SNIFFER_ARRAY);
+    if(snifferArrayFunc==NULL) {
+        ALOGE(" Unable to init Extended Sniffers, dlerror = %s \n", dlerror());
+        return;
+    }
+
+    const DataSource::SnifferFunc *snifferArray = NULL;
+    int snifferCount = 0;
+
+    //Invoke function in libmmparser to return its array of sniffers.
+    snifferArrayFunc(&snifferArray, &snifferCount);
+
+    if(snifferArray==NULL) {
+        ALOGE(" snifferArray is NULL \n");
+        return;
+    }
+
+    bool flag = true;
+    //Register the remote sniffers with the DataSource.
+    for(int i=0; i<snifferCount; i++) {
+        DataSource::RegisterSniffer_l(snifferArray[i], flag);
+        flag = false;
+    }
+}
+#endif
+
 bool ExtendedExtractor::Sniff (
         const sp<DataSource> &source, String8 *mimeType,
         float *confidence,sp<AMessage> *meta) {
diff --git a/media/libstagefright/ExtendedUtils.cpp b/media/libstagefright/ExtendedUtils.cpp
index eb2a52eca..22b06a03c 100644
--- a/media/libstagefright/ExtendedUtils.cpp
+++ b/media/libstagefright/ExtendedUtils.cpp
@@ -47,7 +47,7 @@
 static const int64_t kDefaultAVSyncLateMargin =  40000;
 static const int64_t kMaxAVSyncLateMargin     = 250000;
 
-#ifdef ENABLE_AV_ENHANCEMENTS
+#if defined(ENABLE_AV_ENHANCEMENTS) || defined(QCOM_LEGACY_MMPARSER)
 
 #include <QCMetaData.h>
 #include <QCMediaDefs.h>
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index db71ce587..901e777fc 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -54,7 +54,7 @@
 #include "include/avc_utils.h"
 
 
-#ifdef ENABLE_AV_ENHANCEMENTS
+#if defined(ENABLE_AV_ENHANCEMENTS) || defined(QCOM_LEGACY_MMPARSER)
 #include <QCMediaDefs.h>
 #include <QCMetaData.h>
 #include <QOMX_AudioExtensions.h>
@@ -103,6 +103,11 @@ const static int64_t kBufferFilledEventTimeOutNs = 3000000000LL;
 // component in question is buggy or not.
 const static uint32_t kMaxColorFormatSupported = 1000;
 
+#ifdef QCOM_LEGACY_OMX
+static const int QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03;
+static const int OMX_QCOM_COLOR_FormatYVU420SemiPlanar = 0x7FA30C00;
+#endif
+
 #define FACTORY_CREATE(name) \
 static sp<MediaSource> Make##name(const sp<MediaSource> &source) { \
     return new name(source); \
@@ -1068,6 +1073,9 @@ void OMXCodec::setVideoInputFormat(
     success = success && meta->findInt32(kKeyBitRate, &bitRate);
     success = success && meta->findInt32(kKeyStride, &stride);
     success = success && meta->findInt32(kKeySliceHeight, &sliceHeight);
+#ifdef QCOM_LEGACY_OMX
+    CODEC_LOGI("setVideoInputFormat width=%ld, height=%ld", width, height);
+#endif
     CHECK(success);
     CHECK(stride != 0);
 
@@ -1192,7 +1200,11 @@ void OMXCodec::setVideoInputFormat(
 
     video_def->nFrameWidth = width;
     video_def->nFrameHeight = height;
+#ifdef QCOM_LEGACY_OMX
+    video_def->xFramerate = (frameRate << 16);
+#else
     video_def->xFramerate = 0;      // No need for output port
+#endif
     video_def->nBitrate = bitRate;  // Q16 format
     video_def->eCompressionFormat = compressionFormat;
     video_def->eColorFormat = OMX_COLOR_FormatUnused;
@@ -1742,7 +1754,11 @@ OMXCodec::OMXCodec(
       mLeftOverBuffer(NULL),
       mPaused(false),
       mNativeWindow(
-              (!strncmp(componentName, "OMX.google.", 11))
+              (!strncmp(componentName, "OMX.google.", 11)
+#ifdef QCOM_LEGACY_OMX
+              || !strncmp(componentName, "OMX.qcom",8)
+#endif
+              )
                         ? NULL : nativeWindow),
 #ifdef QCOM_HARDWARE
       mNumBFrames(0),
@@ -1810,7 +1826,7 @@ void OMXCodec::setComponentRole(
             "audio_decoder.flac", "audio_encoder.flac" },
         { MEDIA_MIMETYPE_AUDIO_MSGSM,
             "audio_decoder.gsm", "audio_encoder.gsm" },
-#ifdef ENABLE_AV_ENHANCEMENTS
+#if defined(ENABLE_AV_ENHANCEMENTS) || defined(QCOM_LEGACY_MMPARSER)
         { MEDIA_MIMETYPE_VIDEO_DIVX,
             "video_decoder.divx", NULL },
         { MEDIA_MIMETYPE_AUDIO_AC3,
@@ -5273,6 +5289,12 @@ void OMXCodec::initOutputFormat(const sp<MetaData> &inputFormat) {
 
             mOutputFormat->setInt32(kKeyWidth, video_def->nFrameWidth);
             mOutputFormat->setInt32(kKeyHeight, video_def->nFrameHeight);
+#ifdef QCOM_LEGACY_OMX
+            // With legacy codec we get wrong color format here
+            if (!strncmp(mComponentName, "OMX.qcom.", 9))
+                mOutputFormat->setInt32(kKeyColorFormat, OMX_QCOM_COLOR_FormatYVU420SemiPlanar);
+            else
+#endif
             mOutputFormat->setInt32(kKeyColorFormat, video_def->eColorFormat);
 
             if (!mIsEncoder) {
diff --git a/media/libstagefright/colorconversion/Android.mk b/media/libstagefright/colorconversion/Android.mk
index 59a64ba25..0a7853987 100644
--- a/media/libstagefright/colorconversion/Android.mk
+++ b/media/libstagefright/colorconversion/Android.mk
@@ -9,6 +9,15 @@ LOCAL_C_INCLUDES := \
         $(TOP)/frameworks/native/include/media/openmax \
         $(TOP)/hardware/msm7k
 
+ifeq ($(TARGET_QCOM_LEGACY_OMX),true)
+        LOCAL_CFLAGS += -DQCOM_LEGACY_OMX
+ifneq ($(TARGET_QCOM_DISPLAY_VARIANT),)
+        LOCAL_C_INCLUDES += $(TOP)/hardware/qcom/display-$(TARGET_QCOM_DISPLAY_VARIANT)/libgralloc
+else
+        LOCAL_C_INCLUDES += $(TOP)/hardware/qcom/display/libgralloc
+endif
+endif
+
 LOCAL_MODULE:= libstagefright_color_conversion
 
 include $(BUILD_STATIC_LIBRARY)
diff --git a/media/libstagefright/colorconversion/SoftwareRenderer.cpp b/media/libstagefright/colorconversion/SoftwareRenderer.cpp
index 3559893f0..765ab4405 100644
--- a/media/libstagefright/colorconversion/SoftwareRenderer.cpp
+++ b/media/libstagefright/colorconversion/SoftwareRenderer.cpp
@@ -26,13 +26,29 @@
 #include <ui/GraphicBufferMapper.h>
 #include <gui/IGraphicBufferProducer.h>
 
+#ifdef QCOM_LEGACY_OMX
+#include <gralloc_priv.h>
+#endif
+
 namespace android {
 
+#ifdef QCOM_LEGACY_OMX
+static const int QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03;
+static const int OMX_QCOM_COLOR_FormatYVU420SemiPlanar = 0x7FA30C00;
+#endif
+
 static bool runningInEmulator() {
     char prop[PROPERTY_VALUE_MAX];
     return (property_get("ro.kernel.qemu", prop, NULL) > 0);
 }
 
+#ifdef QCOM_LEGACY_OMX
+static int ALIGN(int x, int y) {
+    // y must be a power of 2.
+    return (x + y - 1) & ~(y - 1);
+}
+#endif
+
 SoftwareRenderer::SoftwareRenderer(
         const sp<ANativeWindow> &nativeWindow, const sp<MetaData> &meta)
     : mConverter(NULL),
@@ -77,6 +93,16 @@ SoftwareRenderer::SoftwareRenderer(
 
             // fall through.
         }
+#ifdef QCOM_LEGACY_OMX
+        case OMX_QCOM_COLOR_FormatYVU420SemiPlanar:
+        {
+            halFormat = HAL_PIXEL_FORMAT_YCrCb_420_SP;
+            bufWidth = ALIGN(mCropWidth, 16);
+            bufHeight = ALIGN(mCropHeight, 2);
+            mAlign = ALIGN(mWidth, 16) * ALIGN(mHeight, 16);
+            break;
+        }
+#endif
 
         default:
             halFormat = HAL_PIXEL_FORMAT_RGB_565;
@@ -89,6 +115,12 @@ SoftwareRenderer::SoftwareRenderer(
             break;
     }
 
+#ifdef QCOM_LEGACY_OMX
+    ALOGI("Buffer color format: 0x%X", mColorFormat);
+    ALOGI("Video params: mWidth: %d, mHeight: %d, mCropWidth: %d, mCropHeight: %d, mCropTop: %d, mCropLeft: %d",
+         mWidth, mHeight, mCropWidth, mCropHeight, mCropTop, mCropLeft);
+#endif
+
     CHECK(mNativeWindow != NULL);
     CHECK(mCropWidth > 0);
     CHECK(mCropHeight > 0);
@@ -106,7 +138,11 @@ SoftwareRenderer::SoftwareRenderer(
             native_window_set_usage(
             mNativeWindow.get(),
             GRALLOC_USAGE_SW_READ_NEVER | GRALLOC_USAGE_SW_WRITE_OFTEN
-            | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP));
+            | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP
+#ifdef QCOM_LEGACY_OMX
+            | GRALLOC_USAGE_PRIVATE_ADSP_HEAP | GRALLOC_USAGE_PRIVATE_UNCACHED
+#endif
+            ));
 #endif
 
     CHECK_EQ(0,
@@ -141,10 +177,12 @@ SoftwareRenderer::~SoftwareRenderer() {
     mConverter = NULL;
 }
 
+#ifndef QCOM_LEGACY_OMX
 static int ALIGN(int x, int y) {
     // y must be a power of 2.
     return (x + y - 1) & ~(y - 1);
 }
+#endif
 
 void SoftwareRenderer::render(
         const void *data, size_t size, void *platformPrivate) {
@@ -203,6 +241,32 @@ void SoftwareRenderer::render(
             dst_u += dst_c_stride;
             dst_v += dst_c_stride;
         }
+#ifdef QCOM_LEGACY_OMX
+    } else if (mColorFormat == OMX_QCOM_COLOR_FormatYVU420SemiPlanar) {
+        // Legacy Qualcomm color format
+
+        uint8_t *src_y = (uint8_t *)data;
+        uint8_t *src_u = src_y + mAlign;
+        uint8_t *dst_y = (uint8_t *)dst;
+        uint8_t *dst_u = dst_y + buf->stride * buf->height;
+        size_t bufsz = ALIGN(mCropWidth, 16) * ALIGN(mCropHeight, 2);
+
+        // Legacy codec doesn't return crop params. Ignore it for speedup :)
+        memcpy(dst_y, src_y, bufsz);
+        memcpy(dst_u, src_u, bufsz / 2);
+
+        /*for(size_t y = 0; y < mCropHeight; ++y) {
+            memcpy(dst_y, src_y, mCropWidth);
+            dst_y += buf->stride;
+            src_y += mWidth;
+
+            if(y & 1) {
+                memcpy(dst_u, src_u, mCropWidth);
+                dst_u += buf->stride;
+                src_u += mWidth;
+            }
+        }*/
+#endif
     } else {
         CHECK_EQ(mColorFormat, OMX_TI_COLOR_FormatYUV420PackedSemiPlanar);
         if ((size_t)mWidth * mHeight * 3 / 2 > size) {
diff --git a/media/libstagefright/include/ExtendedExtractor.h b/media/libstagefright/include/ExtendedExtractor.h
index 3bce1ff99..48d3ba2ba 100644
--- a/media/libstagefright/include/ExtendedExtractor.h
+++ b/media/libstagefright/include/ExtendedExtractor.h
@@ -34,6 +34,11 @@
 namespace android {
 
 class MediaExtractor;
+#ifdef QCOM_LEGACY_MMPARSER
+    typedef void (*SnifferArrayFunc)(const DataSource::SnifferFunc* snifferArray[], int *count);
+    static const char* MEDIA_SNIFFER_ARRAY = "snifferArray";
+#endif
+
 class ExtendedExtractor
 {
 public:
@@ -42,6 +47,9 @@ public:
     static bool Sniff (
             const sp<DataSource> &source, String8 *mimeType,
             float *confidence,sp<AMessage> *meta);
+#ifdef QCOM_LEGACY_MMPARSER
+    static void RegisterSniffers();
+#endif
 };
 
 }  // namespace android
diff --git a/media/libstagefright/include/SoftwareRenderer.h b/media/libstagefright/include/SoftwareRenderer.h
index 7ab004239..27bcf6c1e 100644
--- a/media/libstagefright/include/SoftwareRenderer.h
+++ b/media/libstagefright/include/SoftwareRenderer.h
@@ -48,6 +48,9 @@ private:
     int32_t mWidth, mHeight;
     int32_t mCropLeft, mCropTop, mCropRight, mCropBottom;
     int32_t mCropWidth, mCropHeight;
+#ifdef QCOM_LEGACY_OMX
+    int32_t mAlign;
+#endif
 
     SoftwareRenderer(const SoftwareRenderer &);
     SoftwareRenderer &operator=(const SoftwareRenderer &);
-- 
2.14.1

