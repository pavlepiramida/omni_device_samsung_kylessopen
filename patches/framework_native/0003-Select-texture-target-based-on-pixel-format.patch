From 4fd10eddd6763f080c7b070c3db1f5f086c11b97 Mon Sep 17 00:00:00 2001
From: Neti Ravi Kumar <ravineti@codeaurora.org>
Date: Tue, 14 Feb 2012 19:07:28 +0530
Subject: [PATCH 3/5] Select texture target based on pixel format

Adreno is not optimized for GL_TEXTURE_EXTERNAL_OES, making GPU
utilization (and power), high with GL_TEXTURE_EXTERNAL_OES for
RGB formats.

Change texture target from GL_EXTERNAL_TEXTURE_OES to dynamically
select between GL_EXTERNAL_TEXTURE_OES, and GL_TEXTURE_2D based
on the pixel format.

This change is done to reduce the composition time for 8x55

Change-Id: I89ab1d60b23eef55442a9fd338b2a05b3304ce61
---
 libs/gui/Android.mk                                | 11 +++++++++++
 services/surfaceflinger/SurfaceFlingerConsumer.cpp | 22 ++++++++++++++++++++++
 2 files changed, 33 insertions(+)

diff --git a/libs/gui/Android.mk b/libs/gui/Android.mk
index 671045baf..f747130c6 100644
--- a/libs/gui/Android.mk
+++ b/libs/gui/Android.mk
@@ -82,6 +82,7 @@ ifeq ($(TARGET_QCOM_DISPLAY_VARIANT), legacy)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
 
+
 ifeq ($(TARGET_TOROPLUS_RADIO),true)
 
 	LOCAL_CFLAGS += -DTOROPLUS_RADIO
@@ -91,6 +92,16 @@ endif
 ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
     LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
 
+
+ifeq ($(TARGET_DOESNT_USE_FENCE_SYNC),true)
+        LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
+endif
+ifeq ($(SENSORS_NEED_SETRATE_ON_ENABLE), true)
+        LOCAL_CFLAGS += -DSENSORS_SETRATE_ON_ENABLE
+
+endif
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
 endif
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 3b1e463d2..b63485fbd 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -105,6 +105,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter)
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
-- 
2.14.1

