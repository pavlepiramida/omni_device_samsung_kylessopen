From 4d1723554f4f1f5b9a0586415f162f9102d3bdbe Mon Sep 17 00:00:00 2001
From: Pavle Radosavljevic <pavlepiramida@gmail.com>
Date: Mon, 16 Oct 2017 20:56:56 +0200
Subject: [PATCH 1/5] wtf?

Change-Id: I19b4ec51b1095a8bba98d2c36ee1921f1d89d444
---
 include/gui/GLConsumer.h                           |  6 ++++
 libs/gui/Android.mk                                | 12 ++++++--
 services/surfaceflinger/Android.mk                 |  6 ++++
 services/surfaceflinger/Layer.cpp                  |  4 +++
 .../RenderEngine/GLES11RenderEngine.cpp            |  6 ++++
 services/surfaceflinger/SurfaceFlinger.cpp         |  1 +
 services/surfaceflinger/SurfaceFlingerConsumer.cpp | 32 ++++++++++++++++++++++
 services/surfaceflinger/SurfaceFlingerConsumer.h   |  7 +++++
 8 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index a5fdfb9d2..40fa4369c 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -373,7 +373,13 @@ private:
     // glCopyTexSubImage to read from the texture.  This is a hack to work
     // around a GL driver limitation on the number of FBO attachments, which the
     // browser's tile cache exceeds.
+#ifdef DECIDE_TEXTURE_TARGET
+protected:
+    uint32_t mTexTarget;
+private:
+#else
     const uint32_t mTexTarget;
+#endif
 
     // EGLSlot contains the information and object references that
     // GLConsumer maintains about a BufferQueue buffer slot.
diff --git a/libs/gui/Android.mk b/libs/gui/Android.mk
index 841382e55..671045baf 100644
--- a/libs/gui/Android.mk
+++ b/libs/gui/Android.mk
@@ -66,6 +66,10 @@ ifeq ($(BOARD_USE_MHEAP_SCREENSHOT),true)
     LOCAL_CFLAGS += -DUSE_MHEAP_SCREENSHOT
 endif
 
+ifeq ($(BOARD_USE_MHEAP_SCREENSHOT),true)
+    LOCAL_CFLAGS += -DUSE_MHEAP_SCREENSHOT
+endif
+
 LOCAL_MODULE:= libgui
 
 ifeq ($(TARGET_BOARD_PLATFORM), tegra)
@@ -77,12 +81,16 @@ endif
 ifeq ($(TARGET_QCOM_DISPLAY_VARIANT), legacy)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
+
 ifeq ($(TARGET_TOROPLUS_RADIO),true)
+
 	LOCAL_CFLAGS += -DTOROPLUS_RADIO
 endif
 
-ifeq ($(SENSORS_NEED_SETRATE_ON_ENABLE), true)
-        LOCAL_CFLAGS += -DSENSORS_SETRATE_ON_ENABLE
+
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+
 endif
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index a68064ee4..d9897f09c 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -71,10 +71,12 @@ ifeq ($(BOARD_USE_MHEAP_SCREENSHOT),true)
     LOCAL_CFLAGS += -DUSE_MHEAP_SCREENSHOT
 endif
 
+
 ifeq ($(BOARD_NEEDS_OLD_HWC_API),true)
     LOCAL_CFLAGS += -DOLD_HWC_API
 endif
 
+
 # See build/target/board/generic/BoardConfig.mk for a description of this setting.
 ifneq ($(VSYNC_EVENT_PHASE_OFFSET_NS),)
     LOCAL_CFLAGS += -DVSYNC_EVENT_PHASE_OFFSET_NS=$(VSYNC_EVENT_PHASE_OFFSET_NS)
@@ -95,6 +97,10 @@ else
     LOCAL_CFLAGS += -DPRESENT_TIME_OFFSET_FROM_VSYNC_NS=0
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 LOCAL_CFLAGS += -fvisibility=hidden
 
 LOCAL_SHARED_LIBRARIES := \
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index d6b428fae..82ce78118 100644
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -1127,7 +1127,11 @@ Region Layer::latchBuffer(bool& recomputeVisibleRegions)
 
         Reject r(mDrawingState, getCurrentState(), recomputeVisibleRegions);
 
+#ifdef DECIDE_TEXTURE_TARGET
+        status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r, &mTexture);
+#else
         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r);
+#endif
         if (updateResult == BufferQueue::PRESENT_LATER) {
             // Producer doesn't want buffer to be displayed yet.  Signal a
             // layer update so we check again at the next opportunity.
diff --git a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
index da699659e..31b3dc704 100644
--- a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
+++ b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
@@ -162,8 +162,14 @@ void GLES11RenderEngine::setupLayerTexturing(const Texture& texture) {
     glMatrixMode(GL_TEXTURE);
     glLoadMatrixf(texture.getMatrix().asArray());
     glMatrixMode(GL_MODELVIEW);
+#ifdef DECIDE_TEXTURE_TARGET
+    glDisable((target == Texture::TEXTURE_2D) ?
+            GL_TEXTURE_EXTERNAL_OES : GL_TEXTURE_2D);
+    glEnable(target);
+#else
     glDisable(GL_TEXTURE_2D);
     glEnable(GL_TEXTURE_EXTERNAL_OES);
+#endif
 }
 
 void GLES11RenderEngine::setupLayerBlackedOut() {
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 9d6c19985..4f061e5df 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -3511,6 +3511,7 @@ SurfaceFlinger::DisplayDeviceState::DisplayDeviceState(DisplayDevice::DisplayTyp
 
 }; // namespace android
 
+
 #ifndef USE_MHEAP_SCREENSHOT
 #if defined(__gl_h_)
 #error "don't include gl/gl.h in this file"
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 6dc093e78..4655239d9 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -24,12 +24,22 @@
 #include <utils/Trace.h>
 #include <utils/Errors.h>
 
+#ifdef DECIDE_TEXTURE_TARGET
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#endif
+
 namespace android {
 
 // ---------------------------------------------------------------------------
 
+#ifdef DECIDE_TEXTURE_TARGET
+status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter, Texture* mTexture)
+{
+#else
 status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter)
 {
+#endif
     ATRACE_CALL();
     ALOGV("updateTexImage");
     Mutex::Autolock lock(mMutex);
@@ -73,6 +83,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter)
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.h b/services/surfaceflinger/SurfaceFlingerConsumer.h
index 688ad3224..a7ce475d7 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.h
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.h
@@ -18,6 +18,9 @@
 #define ANDROID_SURFACEFLINGERCONSUMER_H
 
 #include <gui/GLConsumer.h>
+#ifdef DECIDE_TEXTURE_TARGET
+#include "RenderEngine/Texture.h"
+#endif
 
 namespace android {
 // ----------------------------------------------------------------------------
@@ -46,7 +49,11 @@ public:
     // reject the newly acquired buffer.  Unlike the GLConsumer version,
     // this does not guarantee that the buffer has been bound to the GL
     // texture.
+#ifdef DECIDE_TEXTURE_TARGET
+    status_t updateTexImage(BufferRejecter* rejecter, Texture* mTexture = 0);
+#else
     status_t updateTexImage(BufferRejecter* rejecter);
+#endif
 
     // See GLConsumer::bindTextureImageLocked().
     status_t bindTextureImage();
-- 
2.14.1

