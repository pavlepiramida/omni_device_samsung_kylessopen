From b1aceaba1b83b7882d66d79824fac2fa0a2d5c3c Mon Sep 17 00:00:00 2001
From: sarbyn <sarbyn@gmail.com>
Date: Sat, 30 Aug 2014 20:29:04 +0530
Subject: [PATCH 5/8] Development shortcuts (1/2)

It enables the wipe data and application force close option in the recent
tasks list and in the notification area.
These options will be available only if the
Development shortcut option is enabled.

https://gitorious.org/cyandreamproject/android_frameworks_base/commit/016664aa129ff00b556a6c56e06f474593d1a04f

Change-Id: Id585483d2ec00f2b5bf929bf2b5e8948a5aae510
---
 core/java/android/provider/Settings.java           | 10 +++-
 packages/SystemUI/AndroidManifest.xml              | 10 ++++
 .../SystemUI/res/menu/notification_popup_menu.xml  |  2 +
 packages/SystemUI/res/menu/recent_popup_menu.xml   |  2 +
 packages/SystemUI/res/values/custom_strings.xml    |  4 ++
 .../android/systemui/recent/RecentsPanelView.java  | 65 ++++++++++++++++++++++
 .../android/systemui/statusbar/BaseStatusBar.java  | 45 +++++++++++++++
 7 files changed, 137 insertions(+), 1 deletion(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 1b5fb28cfe..8d37226b4b 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5957,6 +5957,13 @@ public final class Settings {
          */
         public static final String ADVANCED_REBOOT = "advanced_reboot";
 
+	/**
+	 * 'Wipe data', 'force close' options in notification panel and recent
+	 * apps list
+	 * @hide
+	 */
+	public static final String DEVELOPMENT_SHORTCUT = "development_shortcut";
+
         /**
          * Whether developer settings dare enabled.
          * @hide
@@ -6012,7 +6019,8 @@ public final class Settings {
             MOUNT_UMS_PROMPT,
             MOUNT_UMS_NOTIFY_ENABLED,
             UI_NIGHT_MODE,
-            ADVANCED_REBOOT
+            ADVANCED_REBOOT,
+	    DEVELOPMENT_SHORTCUT
         };
 
         /**
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index ea87f27e5c..63674f0c3b 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -94,6 +94,16 @@
     <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
     <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" />
 
+    <!-- Development shortcut -->
+    <uses-permission android:name="android.permission.CLEAR_APP_USER_DATA" />
+    <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES" />
+
+    <!-- WallpaperManager -->
+    <uses-permission android:name="android.permission.SET_WALLPAPER" />
+
+    <!-- DownloadProvider -->
+    <uses-permission android:name="android.permission.ACCESS_ALL_DOWNLOADS" />
+
     <application
         android:persistent="true"
         android:allowClearUserData="false"
diff --git a/packages/SystemUI/res/menu/notification_popup_menu.xml b/packages/SystemUI/res/menu/notification_popup_menu.xml
index e436a5cebf..8c1843b685 100644
--- a/packages/SystemUI/res/menu/notification_popup_menu.xml
+++ b/packages/SystemUI/res/menu/notification_popup_menu.xml
@@ -19,6 +19,8 @@
 -->
 <menu xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:id="@+id/notification_inspect_item" android:title="@string/status_bar_notification_inspect_item_title" />
+    <item android:id="@+id/notification_inspect_item_force_stop" android:title="@string/advanced_dev_option_force_stop" />
+    <item android:id="@+id/notification_inspect_item_wipe_app" android:title="@string/advanced_dev_options_wipe_app" />
     <item android:id="@+id/notification_hide_icon_packages" android:title="@string/status_bar_notification_hide_icon_packages"
             android:checkable="true" android:checked="false" />
 </menu>
diff --git a/packages/SystemUI/res/menu/recent_popup_menu.xml b/packages/SystemUI/res/menu/recent_popup_menu.xml
index eecfb9ab7f..1220fa5127 100644
--- a/packages/SystemUI/res/menu/recent_popup_menu.xml
+++ b/packages/SystemUI/res/menu/recent_popup_menu.xml
@@ -20,4 +20,6 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:id="@+id/recent_remove_item" android:title="@string/status_bar_recent_remove_item_title" />
     <item android:id="@+id/recent_inspect_item" android:title="@string/status_bar_recent_inspect_item_title" />
+    <item android:id="@+id/recent_force_stop" android:title="@string/advanced_dev_option_force_stop" />
+    <item android:id="@+id/recent_wipe_app" android:title="@string/advanced_dev_options_wipe_app" />
 </menu>
diff --git a/packages/SystemUI/res/values/custom_strings.xml b/packages/SystemUI/res/values/custom_strings.xml
index c05f78d558..f81357220d 100644
--- a/packages/SystemUI/res/values/custom_strings.xml
+++ b/packages/SystemUI/res/values/custom_strings.xml
@@ -139,6 +139,10 @@
     <string name="navbar_menu_always_button">Menu (alwaysShow) button</string>
     <string name="navbar_menu_big_button">Menu button</string>
 
+    <!-- Development shortcut -->
+    <string name="advanced_dev_options_wipe_app">Wipe app data</string>
+    <string name="advanced_dev_option_force_stop">Force stop</string>
+
     <!-- Content description of the data connection type DC-HSPA+ for accessibility (not shown on the screen). [CHAR LIMIT=NONE] -->
     <string name="accessibility_data_connection_DC" translatable="false">DC-HSPA+</string>
 
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
index e1b88f7db4..281aca367b 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
@@ -23,9 +23,15 @@ import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.ActivityOptions;
 import android.app.TaskStackBuilder;
+import android.app.admin.DevicePolicyManager;
 import android.content.ActivityNotFoundException;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.IPackageDataObserver;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -62,6 +68,7 @@ import android.widget.ImageView.ScaleType;
 import android.widget.PopupMenu;
 import android.widget.TextView;
 
+
 import com.android.systemui.R;
 import com.android.systemui.statusbar.BaseStatusBar;
 import com.android.systemui.statusbar.StatusBarPanel;
@@ -871,6 +878,36 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             new PopupMenu(mContext, anchorView == null ? selectedView : anchorView);
         mPopup = popup;
         popup.getMenuInflater().inflate(R.menu.recent_popup_menu, popup.getMenu());
+
+	final ContentResolver cr = mContext.getContentResolver();
+	if (Settings.Secure.getInt(cr,
+	    Settings.Secure.DEVELOPMENT_SHORTCUT, 0) == 0) {
+	    popup.getMenu().findItem(R.id.recent_force_stop).setVisible(false);
+	    popup.getMenu().findItem(R.id.recent_wipe_app).setVisible(false);
+	} else {
+	    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
+	    if (viewHolder != null) {
+		final TaskDescription ad = viewHolder.taskDescription;
+		try {
+		    PackageManager pm =  (PackageManager) mContext.getPackageManager();
+		    ApplicationInfo mAppInfo = pm.getApplicationInfo(ad.packageName, 0);
+		    DevicePolicyManager mDpm = (DevicePolicyManager) mContext
+			    .getSystemService(Context.DEVICE_POLICY_SERVICE);
+		    if ((mAppInfo.flags&(ApplicationInfo.FLAG_SYSTEM
+			  | ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA))
+			  == ApplicationInfo.FLAG_SYSTEM
+			  || mDpm.packageHasActiveAdmins(ad.packageName)) {
+			popup.getMenu()
+			.findItem(R.id.notification_inspect_item_wipe_app).setEnabled(false);
+		    } else {
+			Log.d(TAG, "NOT a 'special' application");
+		    }
+		} catch (NameNotFoundException ex) {
+		    Log.e(TAG, "Failed looking up ApplicationInfo for " + ad.packageName, ex);
+		}
+	    }
+	}
+
         popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
             public boolean onMenuItemClick(MenuItem item) {
                 if (item.getItemId() == R.id.recent_remove_item) {
@@ -881,6 +918,29 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                         final TaskDescription ad = viewHolder.taskDescription;
                         startApplicationDetailsActivity(ad.packageName);
                         show(false);
+		    } else {
+			throw new IllegalStateException("Oops, no tag on view " + selectedView);
+		    }
+		} else if (item.getItemId() == R.id.recent_force_stop) {
+		    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
+		    if (viewHolder != null) {
+			final TaskDescription ad = viewHolder.taskDescription;
+			ActivityManager am = (ActivityManager)mContext.getSystemService(
+				Context.ACTIVITY_SERVICE);
+			am.forceStopPackage(ad.packageName);
+			((ViewGroup) mRecentsContainer).removeViewInLayout(selectedView);
+		    } else {
+			throw new IllegalStateException("Oops, no tag on view" + selectedView);
+		    }
+		} else if (item.getItemId() == R.id.recent_wipe_app) {
+		    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
+		    if (viewHolder != null) {
+			final TaskDescription ad = viewHolder.taskDescription;
+			ActivityManager am = (ActivityManager) mContext
+				.getSystemService(Context.ACTIVITY_SERVICE);
+			am.clearApplicationUserData(ad.packageName,
+				new FakeClearUserDataObserver());
+			((ViewGroup) mRecentsContainer).removeViewInLayout(selectedView);
                     } else {
                         throw new IllegalStateException("Oops, no tag on view " + selectedView);
                     }
@@ -920,4 +980,9 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         }
         mRecentsContainer.drawFadedEdges(canvas, left, right, top, bottom);
     }
+
+    class FakeClearUserDataObserver extends IPackageDataObserver.Stub {
+	public void onRemoveCompleted(final String packageName, final boolean succeeded) {
+	}
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index c2234e52c8..5bf6b4afb9 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -24,6 +24,7 @@ import android.app.ActivityManagerNative;
 import android.app.Notification;
 import android.app.PendingIntent;
 import android.app.TaskStackBuilder;
+import android.app.admin.DevicePolicyManager;
 import android.content.ActivityNotFoundException;
 import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
@@ -31,6 +32,8 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
+import android.content.pm.IPackageDataObserver;
+import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.res.Configuration;
 import android.content.pm.ResolveInfo;
@@ -57,6 +60,7 @@ import android.service.dreams.IDreamManager;
 import android.service.notification.StatusBarNotification;
 import android.text.TextUtils;
 import android.util.Log;
+import android.util.Slog;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.IWindowManager;
@@ -461,6 +465,31 @@ public abstract class BaseStatusBar extends SystemUI implements
                 mNotificationBlamePopup.getMenuInflater().inflate(
                         R.menu.notification_popup_menu,
                         mNotificationBlamePopup.getMenu());
+		final ContentResolver cr =  mContext.getContentResolver();
+
+		if (Settings.Secure.getInt(cr,
+			Settings.Secure.DEVELOPMENT_SHORTCUT, 0) == 0) {
+		    mNotificationBlamePopup.getMenu()
+			    .findItem(R.id.notification_inspect_item_force_stop).setVisible(false);
+		    mNotificationBlamePopup.getMenu()
+			    .findItem(R.id.notification_inspect_item_wipe_app).setVisible(false);
+		} else {
+		    try {
+			PackageManager pm =  (PackageManager) mContext.getPackageManager();
+			ApplicationInfo mAppInfo = pm.getApplicationInfo(packageNameF, 0);
+			DevicePolicyManager mDpm = (DevicePolicyManager) mContext
+			       .getSystemService(Context.DEVICE_POLICY_SERVICE);
+			if ((mAppInfo.flags&(ApplicationInfo.FLAG_SYSTEM
+			      | ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA))
+			      == ApplicationInfo.FLAG_SYSTEM
+			      || mDpm.packageHasActiveAdmins(packageNameF)) {
+			    mNotificationBlamePopup.getMenu()
+			    .findItem(R.id.notification_inspect_item_wipe_app).setEnabled(false);
+			}
+		    } catch (NameNotFoundException ex) {
+			Slog.e(TAG, "Failed looking up ApplicationInfo for " + packageNameF, ex);
+		    }
+		}
 
                 MenuItem hideIconCheck = mNotificationBlamePopup.getMenu().findItem(R.id.notification_hide_icon_packages);
                 if (hideIconCheck != null) {
@@ -476,6 +505,17 @@ public abstract class BaseStatusBar extends SystemUI implements
                         if (item.getItemId() == R.id.notification_inspect_item) {
                             startApplicationDetailsActivity(packageNameF);
                             animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
+			} else if (item.getItemId() == R.id.notification_inspect_item_force_stop) {
+			    ActivityManager am = (ActivityManager) mContext
+				    .getSystemService(
+				    Context.ACTIVITY_SERVICE);
+			    am.forceStopPackage(packageNameF);
+			} else if (item.getItemId() == R.id.notification_inspect_item_wipe_app) {
+			    ActivityManager am = (ActivityManager) mContext
+				    .getSystemService(
+				    Context.ACTIVITY_SERVICE);
+			    am.clearApplicationUserData(packageNameF,
+				    new FakeClearUserDataObserver());
                         } else if (item.getItemId() == R.id.notification_hide_icon_packages) {
                             item.setChecked(!item.isChecked());
                             setIconHiddenByUser(packageNameF, item.isChecked());
@@ -493,6 +533,11 @@ public abstract class BaseStatusBar extends SystemUI implements
         };
     }
 
+    class FakeClearUserDataObserver extends IPackageDataObserver.Stub {
+	public void onRemoveCompleted(final String packageName, final boolean succeeded) {
+	}
+    }
+
     public void dismissPopups() {
         if (mNotificationBlamePopup != null) {
             mNotificationBlamePopup.dismiss();
-- 
2.14.1

